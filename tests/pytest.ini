[tool:pytest]
# Pytest configuration for AI Knowledge website testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Test
python_functions = test_*

# Output and reporting
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=pipelines
    --cov=security
    --cov-report=html:tests/reports/coverage
    --cov-report=xml:tests/reports/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=95
    --html=tests/reports/pytest_report.html
    --self-contained-html
    --json-report
    --json-report-file=tests/reports/pytest_report.json

# Coverage configuration
[coverage:run]
source = pipelines, security
omit = 
    */tests/*
    */venv/*
    */migrations/*
    */__pycache__/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(.*Protocol.*\):
    @(abc\.)?abstractmethod

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions  
    performance: Performance and load tests
    security: Security and compliance tests
    e2e: End-to-end functional tests
    slow: Tests that take more than 10 seconds
    database: Tests that require database connection
    external: Tests that make external API calls
    critical: Critical functionality tests that must pass

# Async configuration
asyncio_mode = auto

# Timeout configuration  
timeout = 300
timeout_method = thread

# Parallel execution
maxfail = 10
tb = short

# Filterwarnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests_oauthlib.*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Minimum Python version
minversion = 3.9