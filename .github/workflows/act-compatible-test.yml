name: Act Compatible Local Testing

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'unit'
        type: choice
        options:
          - unit
          - integration
          - security
          - quality
          - all

env:
  PYTHONPATH: /github/workspace
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Simplified unit tests optimized for local execution
  local-unit-tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.test_type == 'unit' || inputs.test_type == 'all' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      # Skip setup-node action in act environment, use pre-installed Node.js
      if: ${{ !env.ACT }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/site/package-lock.json

    - name: Verify Node.js and npm (act compatibility)
      if: ${{ env.ACT }}
      run: |
        echo "Running in act environment - using pre-installed Node.js"
        
        # Find and setup Node.js path - try both x64 and arm64 architectures
        NODE_PATH=$(find /opt/acttoolcache/node -name "bin" -path "*/18.*/*/bin" | head -1 2>/dev/null)
        if [ -z "$NODE_PATH" ]; then
          # Fallback to any Node.js version available
          NODE_PATH=$(find /opt/acttoolcache/node -name "bin" -path "*/*/*/bin" | head -1 2>/dev/null)
        fi
        
        if [ -n "$NODE_PATH" ]; then
          echo "Found Node.js at: $NODE_PATH"
          export PATH="$NODE_PATH:$PATH"
          echo "PATH=$NODE_PATH:$PATH" >> $GITHUB_ENV
          
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          
          # Check npm version compatibility
          npm_version=$(npm --version)
          if [ "$(printf '%s\n' "8.0.0" "$npm_version" | sort -V | head -n1)" = "8.0.0" ]; then
            echo "npm version $npm_version is compatible (>= 8.0.0)"
          else
            echo "npm version $npm_version is too old, upgrading..."
            npm install -g npm@latest
            echo "Updated npm version: $(npm --version)"
          fi
        else
          echo "ERROR: Node.js not found in expected locations"
          echo "Available Node.js installations:"
          find /opt/acttoolcache/node -name "node" -type f 2>/dev/null || echo "No Node.js installations found"
          exit 1
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pipelines/requirements.txt
        pip install -r pipelines/requirements-dev.txt

    - name: Install Node.js dependencies
      run: |
        cd apps/site
        npm ci

    - name: Run Python unit tests (no DB)
      env:
        TEST_ENVIRONMENT: local
        TEST_MOCK_AI_APIS: true
      run: |
        pytest tests/unit/ \
          -m "unit and not database and not slow" \
          --cov=pipelines \
          --cov-report=term \
          --tb=short \
          -v

    - name: Run frontend unit tests
      working-directory: apps/site
      run: |
        npm run test:unit

    - name: Type checking
      working-directory: apps/site
      run: |
        npm run type-check

  # Basic security checks that work offline
  local-security-tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.test_type == 'security' || inputs.test_type == 'all' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit[toml] safety pip-audit

    - name: Run Bandit security scan
      run: |
        cd pipelines
        bandit -r . -f txt || true

    - name: Check Python dependencies for vulnerabilities
      run: |
        cd pipelines
        pip freeze | safety check --short-report || echo "Safety check completed"

    - name: Audit pip packages
      run: |
        cd pipelines
        pip-audit --desc || echo "Pip audit completed"

  # Code quality checks
  local-quality-tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.test_type == 'quality' || inputs.test_type == 'all' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        pip install black isort flake8 mypy pylint

    - name: Check code formatting
      run: |
        black --check --diff pipelines/ || echo "Formatting issues found"

    - name: Check import sorting
      run: |
        isort --check-only --diff pipelines/ || echo "Import sorting issues found"

    - name: Lint with flake8
      run: |
        flake8 pipelines/ --max-line-length=100 --extend-ignore=E203,W503 || echo "Flake8 issues found"

    - name: Run markdown linting
      working-directory: apps/site
      run: |
        npm ci
        npm run lint || echo "Markdown linting issues found"

  # Integration tests with simplified database setup
  local-integration-tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.test_type == 'integration' || inputs.test_type == 'all' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_knowledge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pipelines/requirements.txt
        pip install -r pipelines/requirements-dev.txt

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_knowledge_test
        TEST_ENVIRONMENT: local
        TEST_MOCK_AI_APIS: true
      run: |
        pytest tests/integration/ \
          -m "integration and not slow" \
          --tb=short \
          -v

  # Summary job
  local-test-summary:
    runs-on: ubuntu-latest
    needs: [local-unit-tests, local-security-tests, local-quality-tests, local-integration-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "üß™ Local Test Results Summary"
        echo "============================"
        echo ""
        echo "Unit Tests: ${{ needs.local-unit-tests.result }}"
        echo "Security Tests: ${{ needs.local-security-tests.result }}"
        echo "Quality Tests: ${{ needs.local-quality-tests.result }}"
        echo "Integration Tests: ${{ needs.local-integration-tests.result }}"
        echo ""
        
        if [[ "${{ needs.local-unit-tests.result }}" == "success" && \
              "${{ needs.local-security-tests.result }}" == "success" && \
              "${{ needs.local-quality-tests.result }}" == "success" && \
              ("${{ needs.local-integration-tests.result }}" == "success" || "${{ needs.local-integration-tests.result }}" == "skipped") ]]; then
          echo "‚úÖ All local tests passed!"
        else
          echo "‚ùå Some tests failed - check individual job results"
          exit 1
        fi