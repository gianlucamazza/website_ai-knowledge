name: Enterprise Markdown Quality Control
# Production-ready quality pipeline for AI Knowledge Website
# Multi-tier validation with intelligent auto-fix and comprehensive reporting

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    paths: 
      - 'apps/site/src/content/**/*.md'
      - 'docs/**/*.md'
      - 'temp-articles/**/*.md'
      - '.github/workflows/markdown-quality.yml'
      - 'quality-control-configs/.markdownlint-cli2.yaml'
      - 'apps/site/.markdownlint.json'
      - 'scripts/migrate_current_violations.py'
      - 'scripts/markdown_quality_fixer.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/site/src/content/**/*.md'
      - 'docs/**/*.md' 
      - 'temp-articles/**/*.md'
      - '.github/workflows/markdown-quality.yml'
      - 'quality-control-configs/.markdownlint-cli2.yaml'
      - 'apps/site/.markdownlint.json'
      - 'scripts/migrate_current_violations.py'
      - 'scripts/markdown_quality_fixer.py'
  workflow_dispatch:
    inputs:
      force_migration:
        description: 'Force migration of all violations'
        required: false
        default: 'false'
        type: boolean
      target_files:
        description: 'Specific files to check (space-separated)'
        required: false
        type: string

# Prevent concurrent runs on the same PR
concurrency:
  group: markdown-quality-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Stage 1: Fast Validation and Auto-fix Attempt
  markdown-validation:
    name: "Stage 1: Validation & Auto-fix"
    runs-on: ubuntu-latest
    
    outputs:
      has_violations: ${{ steps.check_violations.outputs.has_violations }}
      violations_count: ${{ steps.check_violations.outputs.violations_count }}
      auto_fix_successful: ${{ steps.auto_fix.outputs.success }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/site/package-lock.json
          
      - name: Install Node dependencies
        run: |
          cd apps/site
          npm ci --prefer-offline --no-audit
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          pip install --no-cache-dir frontmatter pyyaml
          
      - name: Initial markdown lint check
        id: initial_check
        run: |
          cd apps/site
          set +e  # Don't exit on lint failures
          npm run lint > ../markdown_violations.log 2>&1
          LINT_EXIT_CODE=$?
          echo "lint_exit_code=$LINT_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Count violations
          VIOLATION_COUNT=$(grep -E "(MD[0-9]+)" ../markdown_violations.log | wc -l || echo "0")
          echo "violation_count=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
          
          # Show summary
          echo "## Initial Markdown Violations" >> $GITHUB_STEP_SUMMARY
          echo "Found $VIOLATION_COUNT violations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 ../markdown_violations.log >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      - name: Check for violations
        id: check_violations
        run: |
          VIOLATION_COUNT="${{ steps.initial_check.outputs.violation_count }}"
          echo "violations_count=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$VIOLATION_COUNT" -gt "0" ]; then
            echo "has_violations=true" >> $GITHUB_OUTPUT
            echo "❌ Found $VIOLATION_COUNT markdown violations"
          else
            echo "has_violations=false" >> $GITHUB_OUTPUT  
            echo "✅ No markdown violations found"
          fi
          
      - name: Attempt intelligent automatic fixes
        id: auto_fix
        if: steps.check_violations.outputs.has_violations == 'true'
        run: |
          echo "🔧 Attempting intelligent automatic fixes..."
          
          # First, try the new migration script (safer and more targeted)
          echo "Running targeted migration for current violations..."
          python scripts/migrate_current_violations.py apps/site/src/content --apply --verbose || true
          
          # Then run the general fixer for any remaining issues
          echo "Running general markdown quality fixer..."
          python scripts/markdown_quality_fixer.py apps/site/src/content --verbose || true
          
          # Check if fixes were successful
          cd apps/site
          set +e
          npm run lint > ../post_fix_violations.log 2>&1
          POST_FIX_EXIT_CODE=$?
          
          POST_FIX_COUNT=$(grep -E "(MD[0-9]+)" ../post_fix_violations.log | wc -l || echo "0")
          ORIGINAL_COUNT="${{ steps.check_violations.outputs.violations_count }}"
          
          echo "original_violations=$ORIGINAL_COUNT" >> $GITHUB_OUTPUT
          echo "post_fix_violations=$POST_FIX_COUNT" >> $GITHUB_OUTPUT
          
          # Enhanced success criteria
          if [ "$POST_FIX_COUNT" -eq "0" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ All violations fixed automatically!"
          elif [ "$POST_FIX_COUNT" -le "5" ] && [ "$POST_FIX_COUNT" -lt "$ORIGINAL_COUNT" ]; then
            echo "success=substantial" >> $GITHUB_OUTPUT
            echo "🎯 Substantial fix: Reduced from $ORIGINAL_COUNT to $POST_FIX_COUNT violations (≤5 remaining)"
          elif [ "$POST_FIX_COUNT" -lt "$ORIGINAL_COUNT" ]; then
            echo "success=partial" >> $GITHUB_OUTPUT
            echo "⚠️ Partial fix: Reduced from $ORIGINAL_COUNT to $POST_FIX_COUNT violations"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "❌ Auto-fix unsuccessful - manual intervention required"
          fi
          
          # Generate fix summary
          echo "## Auto-fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Original violations**: $ORIGINAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Remaining violations**: $POST_FIX_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Violations fixed**: $((ORIGINAL_COUNT - POST_FIX_COUNT))" >> $GITHUB_STEP_SUMMARY
          
          if [ "$POST_FIX_COUNT" -gt "0" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Remaining Violations" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 ../post_fix_violations.log >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Commit auto-fixes
        if: steps.auto_fix.outputs.success == 'true' && github.event_name == 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add apps/site/src/content/**/*.md
            git commit -m "fix(markdown): auto-fix markdown quality violations
            
            - Applied automated fixes for MD032 (list spacing)
            - Fixed MD031 (code block spacing)  
            - Added MD040 (code language specification)
            - Fixed MD047 (file ending newlines)
            - Applied MD022 (heading spacing)
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push
            echo "✅ Auto-fixes committed and pushed"
          fi
          
      - name: Upload violation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: markdown-violation-reports
          path: |
            markdown_violations.log
            post_fix_violations.log
          retention-days: 7
          
  # Stage 2: Comprehensive Quality Analysis
  quality-analysis:
    name: "Stage 2: Quality Analysis"
    runs-on: ubuntu-latest
    needs: markdown-validation
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/site/package-lock.json
          
      - name: Install dependencies
        run: |
          cd apps/site
          npm ci --prefer-offline --no-audit
          
      - name: Download violation reports
        uses: actions/download-artifact@v4
        with:
          name: markdown-violation-reports
        continue-on-error: true
        
      - name: Detailed lint analysis with custom config
        run: |
          cd apps/site
          
          # Use our enhanced configuration
          npx markdownlint-cli2 --config ../quality-control-configs/.markdownlint-cli2.yaml \
            "src/content/**/*.md" \
            --output-formatters markdownlint-cli2-formatter-pretty \
            > ../detailed_analysis.log 2>&1 || true
            
          # Generate violation breakdown
          echo "## Detailed Markdown Analysis" > ../analysis_summary.md
          echo "" >> ../analysis_summary.md
          
          # Count by rule type
          echo "### Violations by Rule Type" >> ../analysis_summary.md
          echo "" >> ../analysis_summary.md
          grep -E "(MD[0-9]+)" ../detailed_analysis.log | \
            cut -d' ' -f3 | cut -d'/' -f1 | sort | uniq -c | sort -nr | \
            while read count rule; do
              echo "- **$rule**: $count violations" >> ../analysis_summary.md
            done
            
          echo "" >> ../analysis_summary.md
          echo "### Sample Violations" >> ../analysis_summary.md
          echo '```' >> ../analysis_summary.md
          head -30 ../detailed_analysis.log >> ../analysis_summary.md
          echo '```' >> ../analysis_summary.md
          
      - name: Content quality metrics
        run: |
          cd apps/site/src/content
          
          # Count content files
          GLOSSARY_COUNT=$(find glossary -name "*.md" | wc -l)
          ARTICLE_COUNT=$(find articles -name "*.md" 2>/dev/null | wc -l || echo "0")
          
          # Average file size
          AVG_SIZE=$(find . -name "*.md" -exec wc -l {} \; | awk '{sum+=$1; count++} END {print int(sum/count)}')
          
          echo "## Content Metrics" >> ../../analysis_summary.md
          echo "" >> ../../analysis_summary.md
          echo "- **Glossary entries**: $GLOSSARY_COUNT" >> ../../analysis_summary.md  
          echo "- **Articles**: $ARTICLE_COUNT" >> ../../analysis_summary.md
          echo "- **Average file size**: $AVG_SIZE lines" >> ../../analysis_summary.md
          echo "- **Total content files**: $((GLOSSARY_COUNT + ARTICLE_COUNT))" >> ../../analysis_summary.md
          
      - name: Link validation
        continue-on-error: true
        run: |
          # Quick internal link check
          cd apps/site/src/content
          
          echo "" >> ../../analysis_summary.md
          echo "### Link Validation" >> ../../analysis_summary.md
          
          # Check for broken internal links
          BROKEN_LINKS=0
          for file in $(find . -name "*.md"); do
            # Look for markdown links to glossary entries
            grep -n "]\(/apps/site/src/content/glossary/" "$file" | while read line; do
              link=$(echo "$line" | sed 's/.*](\([^)]*\)).*/\1/')
              if [ ! -f "../../$link" ]; then
                echo "- Broken link in $file: $link" >> ../../analysis_summary.md
                BROKEN_LINKS=$((BROKEN_LINKS + 1))
              fi
            done
          done
          
          if [ "$BROKEN_LINKS" -eq "0" ]; then
            echo "- ✅ No broken internal links found" >> ../../analysis_summary.md
          fi
          
      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-report
          path: |
            analysis_summary.md
            detailed_analysis.log
          retention-days: 30
          
      - name: Add analysis to step summary
        run: |
          cat analysis_summary.md >> $GITHUB_STEP_SUMMARY
          
  # Stage 3: Quality Gate Decision
  quality-gate:
    name: "Stage 3: Quality Gate"
    runs-on: ubuntu-latest
    needs: [markdown-validation, quality-analysis]
    if: always()
    
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: markdown-violation-reports
        continue-on-error: true
        
      - name: Download analysis
        uses: actions/download-artifact@v4  
        with:
          name: quality-analysis-report
        continue-on-error: true
        
      - name: Quality gate decision
        run: |
          echo "## Quality Gate Decision" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          HAS_VIOLATIONS="${{ needs.markdown-validation.outputs.has_violations }}"
          AUTO_FIX_SUCCESS="${{ needs.markdown-validation.outputs.auto_fix_successful }}"
          VIOLATIONS_COUNT="${{ needs.markdown-validation.outputs.violations_count }}"
          
          echo "- **Has violations**: $HAS_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
          echo "- **Violations count**: $VIOLATIONS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-fix successful**: $AUTO_FIX_SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine if quality gate passes
          if [ "$HAS_VIOLATIONS" = "false" ]; then
            echo "✅ **QUALITY GATE: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All markdown quality checks passed successfully." >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [ "$AUTO_FIX_SUCCESS" = "true" ]; then
            echo "✅ **QUALITY GATE: PASSED (AUTO-FIXED)**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY  
            echo "Violations were automatically fixed and committed." >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [ "$AUTO_FIX_SUCCESS" = "substantial" ]; then
            echo "🎯 **QUALITY GATE: SUBSTANTIAL SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Most violations were fixed automatically (≤5 remaining)." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Remaining Tasks:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the few remaining violations" >> $GITHUB_STEP_SUMMARY
            echo "2. Apply final manual fixes if needed" >> $GITHUB_STEP_SUMMARY
            echo "3. Quality gate will pass with this level of fixes" >> $GITHUB_STEP_SUMMARY
            exit 0
          elif [ "$AUTO_FIX_SUCCESS" = "partial" ]; then
            echo "⚠️ **QUALITY GATE: PARTIAL SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Significant violations were fixed, but more manual intervention required." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review remaining violations in the analysis report" >> $GITHUB_STEP_SUMMARY
            echo "2. Run: \`python scripts/migrate_current_violations.py apps/site/src/content --apply\`" >> $GITHUB_STEP_SUMMARY
            echo "3. For complex cases: \`python scripts/markdown_quality_fixer.py apps/site/src/content\`" >> $GITHUB_STEP_SUMMARY
            echo "4. Commit and push the additional fixes" >> $GITHUB_STEP_SUMMARY
            
            # Allow partial fixes in non-main branches, block main for quality
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              REMAINING_COUNT="${{ needs.markdown-validation.outputs.violations_count }}"
              if [ "${REMAINING_COUNT:-999}" -gt "10" ]; then
                echo "❌ **BLOCKING MAIN BRANCH** - Too many violations remaining ($REMAINING_COUNT)" >> $GITHUB_STEP_SUMMARY
                exit 1
              else
                echo "✅ **ALLOWING MAIN BRANCH** - Acceptable violation count ($REMAINING_COUNT ≤ 10)" >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
            else
              exit 0
            fi
          else
            echo "❌ **QUALITY GATE: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Markdown quality violations found and auto-fix unsuccessful." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Manual Fix Required:" >> $GITHUB_STEP_SUMMARY
            echo "1. Run locally: \`python scripts/markdown_quality_fixer.py apps/site/src/content --dry-run\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Review and apply fixes: \`python scripts/markdown_quality_fixer.py apps/site/src/content\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Commit and push the fixes" >> $GITHUB_STEP_SUMMARY
            echo "4. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
            
            # Show violation summary if available
            if [ -f "markdown_violations.log" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Violation Summary:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              head -20 markdown_violations.log >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            
            exit 1
          fi
          
  # Stage 4: Post-success actions
  post-success:
    name: "Stage 4: Post-Success Actions"
    runs-on: ubuntu-latest
    needs: [markdown-validation, quality-analysis, quality-gate]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate quality report
        run: |
          cat > quality_report.md << 'EOF'
          # Markdown Quality Report ✅
          
          **Status**: All quality checks passed successfully
          **Date**: $(date)
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          
          ## Summary
          - ✅ Markdown validation passed
          - ✅ Content quality analysis completed
          - ✅ Link validation successful
          - ✅ Quality gates satisfied
          
          ## Metrics
          - Content files processed: Successfully validated
          - Violations found: ${{ needs.markdown-validation.outputs.violations_count || 0 }}
          - Auto-fixes applied: ${{ needs.markdown-validation.outputs.auto_fix_successful }}
          
          ## Next Actions
          - Content is ready for production deployment
          - All markdown follows enterprise quality standards
          - Documentation contributors can continue content creation
          
          ---
          Generated by AI Knowledge Website Quality Control System
          EOF
          
          echo "Quality report generated successfully" >> $GITHUB_STEP_SUMMARY
          
      - name: Cache quality state
        uses: actions/cache@v3
        with:
          path: quality_report.md
          key: markdown-quality-${{ github.sha }}
          
      - name: Update quality badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Markdown quality validation passed - ready for production"
          # Could integrate with shields.io or similar badge service